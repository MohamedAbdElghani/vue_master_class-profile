{"remainingRequest":"/home/mahmoud/projects/vue_master_class/node_modules/babel-loader/lib/index.js!/home/mahmoud/projects/vue_master_class/node_modules/eslint-loader/index.js??ref--13-0!/home/mahmoud/projects/vue_master_class/src/store/index.js","dependencies":[{"path":"/home/mahmoud/projects/vue_master_class/src/store/index.js","mtime":1645974742763},{"path":"/home/mahmoud/projects/vue_master_class/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mahmoud/projects/vue_master_class/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mahmoud/projects/vue_master_class/node_modules/eslint-loader/index.js","mtime":1644438839843}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL21haG1vdWQvcHJvamVjdHMvdnVlX21hc3Rlcl9jbGFzcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSAndnVleCc7CmltcG9ydCBzb3VyY2VEYXRhIGZyb20gJ0AvZGF0YSc7CmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0b3JlKHsKICBzdGF0ZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzb3VyY2VEYXRhKSwge30sIHsKICAgIGF1dGhJZDogJ1ZYanByMldIYThVeDRCbmdneW04UUZMZHY1QzMnCiAgfSksCiAgZ2V0dGVyczogewogICAgYXV0aFVzZXI6IGZ1bmN0aW9uIGF1dGhVc2VyKHN0YXRlKSB7CiAgICAgIHZhciB1c2VyID0gc3RhdGUudXNlcnMuZmluZChmdW5jdGlvbiAodXNlcikgewogICAgICAgIHJldHVybiB1c2VyLmlkID09PSBzdGF0ZS5hdXRoSWQ7CiAgICAgIH0pOwogICAgICBpZiAoIXVzZXIpIHJldHVybiBudWxsOwogICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB1c2VyKSwge30sIHsKICAgICAgICBnZXQgcG9zdHMoKSB7CiAgICAgICAgICByZXR1cm4gc3RhdGUucG9zdHMuZmlsdGVyKGZ1bmN0aW9uIChwb3N0KSB7CiAgICAgICAgICAgIHJldHVybiBwb3N0LnVzZXJJZCA9PT0gdXNlci5pZDsKICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGdldCBwb3N0c0NvdW50KCkgewogICAgICAgICAgcmV0dXJuIHRoaXMucG9zdHMubGVuZ3RoOwogICAgICAgIH0sCgogICAgICAgIGdldCB0aHJlYWRzKCkgewogICAgICAgICAgcmV0dXJuIHN0YXRlLnRocmVhZHMuZmlsdGVyKGZ1bmN0aW9uIChwb3N0KSB7CiAgICAgICAgICAgIHJldHVybiBwb3N0LnVzZXJJZCA9PT0gdXNlci5pZDsKICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGdldCB0aHJlYWRzQ291bnQoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50aHJlYWRzLmxlbmd0aDsKICAgICAgICB9CgogICAgICB9KTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGNyZWF0ZVBvc3Q6IGZ1bmN0aW9uIGNyZWF0ZVBvc3QoY29udGV4dCwgcG9zdCkgewogICAgICBwb3N0LmlkID0gJ2dncXEnICsgTWF0aC5yYW5kb20oKTsKICAgICAgY29udGV4dC5jb21taXQoJ3NldFBvc3QnLCB7CiAgICAgICAgcG9zdDogcG9zdAogICAgICB9KTsgLy8gc2V0IHRoZSBwb3N0CgogICAgICBjb250ZXh0LmNvbW1pdCgnYXBwZW5kUG9zdFRvVGhyZWFkJywgewogICAgICAgIHBvc3RJZDogcG9zdC5pZCwKICAgICAgICB0aHJlYWRJZDogcG9zdC50aHJlYWRJZAogICAgICB9KTsgLy8gYXBwZW5kIHBvc3QgdG8gdGhyZWFkCiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHNldFBvc3Q6IGZ1bmN0aW9uIHNldFBvc3Qoc3RhdGUsIF9yZWYpIHsKICAgICAgdmFyIHBvc3QgPSBfcmVmLnBvc3Q7CiAgICAgIHN0YXRlLnBvc3RzLnB1c2gocG9zdCk7CiAgICB9LAogICAgYXBwZW5kUG9zdFRvVGhyZWFkOiBmdW5jdGlvbiBhcHBlbmRQb3N0VG9UaHJlYWQoc3RhdGUsIF9yZWYyKSB7CiAgICAgIHZhciBwb3N0SWQgPSBfcmVmMi5wb3N0SWQsCiAgICAgICAgICB0aHJlYWRJZCA9IF9yZWYyLnRocmVhZElkOwogICAgICB2YXIgdGhyZWFkID0gc3RhdGUudGhyZWFkcy5maW5kKGZ1bmN0aW9uICh0aHJlYWQpIHsKICAgICAgICByZXR1cm4gdGhyZWFkLmlkID09PSB0aHJlYWRJZDsKICAgICAgfSk7CiAgICAgIHRocmVhZC5wb3N0cy5wdXNoKHBvc3RJZCk7CiAgICB9CiAgfQp9KTs="},{"version":3,"sources":["/home/mahmoud/projects/vue_master_class/src/store/index.js"],"names":["createStore","sourceData","state","authId","getters","authUser","user","users","find","id","posts","filter","post","userId","postsCount","length","threads","threadsCount","actions","createPost","context","Math","random","commit","postId","threadId","mutations","setPost","push","appendPostToThread","thread"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,MAA5B;AACA,OAAOC,UAAP,MAAuB,QAAvB;AAEA,eAAeD,WAAW,CAAC;AACzBE,EAAAA,KAAK,kCACAD,UADA;AAEHE,IAAAA,MAAM,EAAE;AAFL,IADoB;AAKzBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,kBAAAH,KAAK,EAAI;AACjB,UAAMI,IAAI,GAAGJ,KAAK,CAACK,KAAN,CAAYC,IAAZ,CAAiB,UAAAF,IAAI;AAAA,eAAIA,IAAI,CAACG,EAAL,KAAYP,KAAK,CAACC,MAAtB;AAAA,OAArB,CAAb;AACA,UAAI,CAACG,IAAL,EAAW,OAAO,IAAP;AACX,6CACKA,IADL;AAEE,YAAII,KAAJ,GAAa;AACX,iBAAOR,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmB,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACC,MAAL,KAAgBP,IAAI,CAACG,EAAzB;AAAA,WAAvB,CAAP;AACD,SAJH;;AAKE,YAAIK,UAAJ,GAAkB;AAChB,iBAAO,KAAKJ,KAAL,CAAWK,MAAlB;AACD,SAPH;;AAQE,YAAIC,OAAJ,GAAe;AACb,iBAAOd,KAAK,CAACc,OAAN,CAAcL,MAAd,CAAqB,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACC,MAAL,KAAgBP,IAAI,CAACG,EAAzB;AAAA,WAAzB,CAAP;AACD,SAVH;;AAWE,YAAIQ,YAAJ,GAAoB;AAClB,iBAAO,KAAKD,OAAL,CAAaD,MAApB;AACD;;AAbH;AAeD;AAnBM,GALgB;AA0BzBG,EAAAA,OAAO,EAAE;AACPC,IAAAA,UADO,sBACKC,OADL,EACcR,IADd,EACoB;AACzBA,MAAAA,IAAI,CAACH,EAAL,GAAU,SAASY,IAAI,CAACC,MAAL,EAAnB;AACAF,MAAAA,OAAO,CAACG,MAAR,CAAe,SAAf,EAA0B;AAAEX,QAAAA,IAAI,EAAJA;AAAF,OAA1B,EAFyB,CAEW;;AACpCQ,MAAAA,OAAO,CAACG,MAAR,CAAe,oBAAf,EAAqC;AAAEC,QAAAA,MAAM,EAAEZ,IAAI,CAACH,EAAf;AAAmBgB,QAAAA,QAAQ,EAAEb,IAAI,CAACa;AAAlC,OAArC,EAHyB,CAG0D;AACpF;AALM,GA1BgB;AAiCzBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OADS,mBACAzB,KADA,QACiB;AAAA,UAARU,IAAQ,QAARA,IAAQ;AACxBV,MAAAA,KAAK,CAACQ,KAAN,CAAYkB,IAAZ,CAAiBhB,IAAjB;AACD,KAHQ;AAITiB,IAAAA,kBAJS,8BAIW3B,KAJX,SAIwC;AAAA,UAApBsB,MAAoB,SAApBA,MAAoB;AAAA,UAAZC,QAAY,SAAZA,QAAY;AAC/C,UAAMK,MAAM,GAAG5B,KAAK,CAACc,OAAN,CAAcR,IAAd,CAAmB,UAAAsB,MAAM;AAAA,eAAIA,MAAM,CAACrB,EAAP,KAAcgB,QAAlB;AAAA,OAAzB,CAAf;AACAK,MAAAA,MAAM,CAACpB,KAAP,CAAakB,IAAb,CAAkBJ,MAAlB;AACD;AAPQ;AAjCc,CAAD,CAA1B","sourcesContent":["import { createStore } from 'vuex'\nimport sourceData from '@/data'\n\nexport default createStore({\n  state: {\n    ...sourceData,\n    authId: 'VXjpr2WHa8Ux4Bnggym8QFLdv5C3'\n  },\n  getters: {\n    authUser: state => {\n      const user = state.users.find(user => user.id === state.authId)\n      if (!user) return null\n      return {\n        ...user,\n        get posts () {\n          return state.posts.filter(post => post.userId === user.id)\n        },\n        get postsCount () {\n          return this.posts.length\n        },\n        get threads () {\n          return state.threads.filter(post => post.userId === user.id)\n        },\n        get threadsCount () {\n          return this.threads.length\n        }\n      }\n    }\n  },\n  actions: {\n    createPost (context, post) {\n      post.id = 'ggqq' + Math.random()\n      context.commit('setPost', { post }) // set the post\n      context.commit('appendPostToThread', { postId: post.id, threadId: post.threadId }) // append post to thread\n    }\n  },\n  mutations: {\n    setPost (state, { post }) {\n      state.posts.push(post)\n    },\n    appendPostToThread (state, { postId, threadId }) {\n      const thread = state.threads.find(thread => thread.id === threadId)\n      thread.posts.push(postId)\n    }\n  }\n})\n"]}]}